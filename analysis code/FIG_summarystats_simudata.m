function FIG_summarystats_simudata(type,exp,modelnum,fig,Nrep,ifLoadSimu)
% FIG_summarystats_simudata create summary statistic figures and the
% corresponding model fits (based on data simulated using best-fit
% parameters)
%
% USAGE: FIG_summarystats_simudata(type,exp,modelnum,fig,Nrep)
%   
% INPUTS:
%   type - 1: summary statistics of data, 2: model fits
%   exp - 1 to 5; index of experiment
%   modelnum - 1 to 5; see fun_modelnum2name.m for correspondence between
%       modelnum and model names; can take arbitrary value when type = 1 
%   fig - specifies which summary statistic to plot (see below)
%   Nrep - size of the simulation data (e.g. '100' means 100 times the size
%       as the original data). The default value is 100. For stable
%       results, we recommand using a relatively large number. The figures
%       in the paper were produced with Nrep of 100.
%   ifLoadSimu - whether to load pre-existed simulated data. This option is
%   provided because simulating data can take quite a while. For fast
%   reproduction of the figures in the paper, we recommend that you first
%   run the following scripts to simulate and save all the data needed for
%   plotting, and then run this function by setting ifLoadSimu to 1.
%   === start of script ===
%     if exist('simulation_subj','dir')~=7
%         mkdir('simulation_subj');
%     end
%     [subarray,obsnum] = fun_exp2subarray2obsnum(exp);
%     for subnum = subarray
%         for irep = 1:Nrep
%             [simudata{irep},~] = simulate_data(modelnum,p_min,obsnum/39);
%             save(['simulation_subj/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '_simusize' num2str(obsnum/39) '_Nrep' num2str(Nrep) '.mat']);
%         end
%     end
%   === end of script ====
%
% EXAMPLE: FIG_summarystats(2,1,5,'numswitch',1) plots the fit of the
%   Prop-V model to the number of switches as a function of trial length
%   for experiment 1 (with the same amount of simulated data as in the
%   original experiment)

if nargin == 4
    switch type
        case 1
            Nrep = [];
            ifLoadSimu = [];
        case 2
            Nrep = 100;
            ifLoadSimu = 0;
    end
end

if type == 2 && nargin == 5
    ifLoadSimu = 0;
end

figh = 105*3;
figw1 = 100*3;
figw2 = 120*3;

switch fig
    case 'colorplot' % Fig 1c and all its counterparts (including model fits)
        figure('position',[100 100 figw1 figh]); hold on;
        colorplot(type,exp,modelnum,0,Nrep,ifLoadSimu);
    case 'psychometrics_rstar_tleft' % Fig 1d and all its counterparts (including model fits)
        figure('position',[100 100 figw2 figh]); hold on;
        psychometricsnlornp_bin(type,exp,modelnum,0,3,Nrep,ifLoadSimu);
    case 'Teffect_subset' % Fig 1e and all its counterparts (including model fits; tleft = 4)
        figure('position',[100 100 figw2 figh]); hold on;
        binform = 1; % binform = 1 plots T = 5,7,10; binform = 2 plots all Ts
        psychometricsnl_N(type,exp,modelnum,0,binform,4,Nrep,ifLoadSimu);
    case 'Teffect_all' % Fig S2 (telft = 1 to 8)
        for tleft = 1:8
            figure('position',[100 100 figw2 figh]); hold on;
            psychometricsnl_N(type,exp,modelnum,0,2,tleft,Nrep,ifLoadSimu);
        end
    case 'numswitch' % Fig 1f and all its counterparts (including model fits)
        figure('position',[100 100 figw1 figh]); hold on;
        numswitch(type,exp,modelnum,Nrep,ifLoadSimu);
    case 'avereward' % Fig 1g and all its counterparts (including model fits)
        figure('position',[100 100 figw1 figh]); hold on;
        avereward_T(type,exp,modelnum,Nrep,ifLoadSimu);
end
end

function colorplot(type,exp,modelnum,weightedind,Nrep,ifLoadSimu)
[subarray,obsnum] = fun_exp2subarray2obsnum(exp);
muvalues = linspace(1,5,41);
if type == 1
    % data
    prer = nan(41,9,length(subarray)); num = nan(41,9,length(subarray));
    for subnum = subarray
        script_loadsubdata;
        data = fun_generatemoreinfotask(data);
        data(:,7) = [nan;data(1:end-1,7)];
        data = data(data(:,3)>1,:);
        for muquantilenum = 1:41
            for dayleftorpast = 1:9
                ind = (data(:,7)==muvalues(muquantilenum))&(data(:,2)-data(:,3)+1==dayleftorpast);
                if isempty(data(ind,:))
                    prer(muquantilenum,dayleftorpast,subnum) = nan;
                    num(muquantilenum,dayleftorpast,subnum) = 0;
                else
                    prer(muquantilenum,dayleftorpast,subnum) = mean(data(ind,5));
                    num(muquantilenum,dayleftorpast,subnum) = size(data(ind,:),1);
                end
            end
        end
    end
    [meanprer,howmany,~] = average(prer,num,subarray,weightedind);
    meanprer = fliplr(meanprer); howmany = fliplr(howmany);
    plot_colorplot(exp,meanprer,howmany);
else
    % model
    prer = zeros(41,9,length(subarray),Nrep); num = zeros(41,9,length(subarray),Nrep);
    for subnum = subarray
        if ifLoadSimu
            load(['simulation_subj/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '_simusize' num2str(obsnum/39) '_Nrep' num2str(Nrep) '.mat']);
        end
        for irep = 1:Nrep
            if ifLoadSimu
                [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(simudata{irep});
            else
                load(['fittingresult/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '.mat']);
                [simudata,~] = simulate_data(modelnum,p_min,obsnum/39);
                [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(simudata);
            end
            for muquantilenum = 1:41
                for dayleftorpast = 1:9
                    ind = (muvalue==muvalues(muquantilenum))&(daysleft==dayleftorpast);
                    if isempty(actions(ind))
                        prer(muquantilenum,dayleftorpast,subnum,irep) = nan;
                        num(muquantilenum,dayleftorpast,subnum,irep) = 0;
                    else
                        prer(muquantilenum,dayleftorpast,subnum,irep) = mean(actions(ind));
                        num(muquantilenum,dayleftorpast,subnum,irep) = size(actions(ind),1);
                    end
                end
            end
        end
    end
    prer = nanmean(prer,4); num = nanmean(num,4);
    [meanprer,howmany,~] = average(prer,num,subarray,weightedind);
    meanprer = rot90(meanprer,2); howmany = rot90(howmany,2);
    plot_colorplot(exp,meanprer,howmany);
end
set(gca,'yticklabel',{'1','','2','','3','','4','','5'}); set(gca,'xticklabel',{'9','','7','','5','','3','','1'});
xlabel('Number of days left'); ylabel('Highest reward so far');
set(gca,'fontsize',20);
% colorplotlegend;
end

function psychometricsnlornp_bin(type,exp,modelnum,weightedind,binform,Nrep,ifLoadSimu)
[subarray,obsnum] = fun_exp2subarray2obsnum(exp);
dayslpcell = {[0,3,6,9],0:9,[0 2 4 6 8 10],[1 3 5 7 9 11]};
dayslpbin = dayslpcell{binform};
nbinnum = length(dayslpcell{binform})-1;

% calculate appropriate bins of r* for each subject
muvalues = linspace(1,5,41);
prer = nan(41,9,length(subarray)); num = nan(41,9,length(subarray));
for subnum = subarray
    script_loadsubdata;
    data = fun_generatemoreinfotask(data);
    data(:,7) = [nan;data(1:end-1,7)];
    data = data(data(:,3)>1,:);
    for muquantilenum = 1:41
        for tleft = 1:9
            ind = (data(:,7)==muvalues(muquantilenum))&(data(:,2)-data(:,3)+1==tleft);
            if isempty(data(ind))
                num(muquantilenum,tleft,subnum) = 0;
                prer(muquantilenum,tleft,subnum) = nan;
            else
                num(muquantilenum,tleft,subnum) = size(data(ind),1);
                prer(muquantilenum,tleft,subnum) = mean(data(ind,5));
            end
        end
    end
    for tleft = 1:9
        tmp = [];
        for muind = 1:41
            tmp = [tmp muvalues(muind)*ones(1,num(muind,tleft,subnum))];
        end
        muquantilevalue(:,tleft,subnum) = [1 quantile(tmp,9) 5];
        muquantilecenter(:,tleft,subnum) = quantile(tmp,0.05:0.1:0.95);
    end
    mubinnum = size(muquantilevalue,1)-1;
end

for subnum = subarray
    % data
    script_loadsubdata;
    data = fun_generatemoreinfotask(data);
    data(:,7) = [nan;data(1:end-1,7)];
    data = data(data(:,3)>1,:);
    for muquantilenum = 1:mubinnum
        for N = 1:nbinnum
            switch binform
                case {1,2}
                    ind=(data(:,7)<=muquantilevalue(muquantilenum+1,N,subnum))&(data(:,7)>muquantilevalue(muquantilenum,N,subnum))&(data(:,2)-data(:,3)+1>dayslpbin(N))&(data(:,2)-data(:,3)+1<=dayslpbin(N+1));
                case 3
                    ind=(data(:,7)<=muquantilevalue(muquantilenum+1,N,subnum))&(data(:,7)>muquantilevalue(muquantilenum,N,subnum))&(data(:,2)-data(:,3)+1>dayslpbin(N))&(data(:,2)-data(:,3)+1<dayslpbin(N+1));
            end
            if isempty(data(ind))
                tempprer_data(muquantilenum,N,subnum) = nan;
                tempnum_data(muquantilenum,N,subnum) = 0;
            else
                tempprer_data(muquantilenum,N,subnum) = mean(data(ind,5));
                tempnum_data(muquantilenum,N,subnum) = size(data(ind,:),1);
            end
        end
    end
    
    if type == 2
        % model
        if ifLoadSimu
            load(['simulation_subj/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '_simusize' num2str(obsnum/39) '_Nrep' num2str(Nrep) '.mat']);
        end
        for irep = 1:Nrep
            if ifLoadSimu
                [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(simudata{irep});
            else
                load(['fittingresult/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '.mat']);
                [simudata,~] = simulate_data(modelnum,p_min,obsnum/39);
                [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(simudata);
            end
            for muquantilenum = 1:mubinnum
                for N = 1:nbinnum
                    switch binform
                        case {1,2}
                            ind = (muvalue<=muquantilevalue(muquantilenum+1,N,subnum))&(muvalue>muquantilevalue(muquantilenum,N,subnum))&(daysleft>dayslpbin(N))&(daysleft<=dayslpbin(N+1));
                        case 3
                            ind = (muvalue<=muquantilevalue(muquantilenum+1,N,subnum))&(muvalue>muquantilevalue(muquantilenum,N,subnum))&(daysleft>dayslpbin(N))&(daysleft<dayslpbin(N+1));
                    end
                    if isempty(actions(ind))
                        tempprer_model(muquantilenum,N,subnum,irep) = nan;
                        tempnum_model(muquantilenum,N,subnum,irep) = 0;
                    else
                        tempprer_model(muquantilenum,N,subnum,irep) = mean(actions(ind));
                        tempnum_model(muquantilenum,N,subnum,irep) = length(actions(ind));
                    end
                end
            end
        end
    end
end

load('tencolors');
C = flipud(tencolors);
switch binform
    case {1,2}
        C = C(2:end,:);
    case 3
        C = C([1 3 5 7 9]+1,:);
end
if type == 1
    [meanprer_data,~,seprer_data] = average(tempprer_data,tempnum_data,subarray,weightedind);
    meanprer_data(isnan(seprer_data)) = nan;
    hold on;
    for N = 1:nbinnum
        xarray = mean(muquantilecenter(:,N,subarray),3);
        xarray = xarray(:)';
        errorbar(xarray(seprer_data(:,N)~=0),meanprer_data(seprer_data(:,N)~=0,...
            N),seprer_data(seprer_data(:,N)~=0,N),...
            'color',C(N,:),'LineStyle','none','LineWidth',2,'capsize',3);
        plot(xarray,meanprer_data(:,N),'color',C(N,:),'LineWidth',2);
    end
else
    tempprer_model = nanmean(tempprer_model,4); tempnum_model = nanmean(tempnum_model,4);
    
    [meanprer_data,~,seprer_data] = average(tempprer_data,tempnum_data,subarray,weightedind);
    [meanprer_model,~,seprer_model] = average(nanmean(tempprer_model,4),nanmean(tempnum_model,4),subarray,weightedind);
    meanprer_data(isnan(seprer_data)) = nan; meanprer_model(isnan(seprer_model)) = nan;
    
    hold on;
    for N=1:nbinnum
        xarray = mean(muquantilecenter(:,N,subarray),3);
        xarray = xarray(:)';
        errorbar(xarray(seprer_data(:,N)~=0),meanprer_data(seprer_data(:,N)~=0,N),...
            seprer_data(seprer_data(:,N)~=0,N),'color',C(N,:),'LineWidth',2,'LineStyle','none');
        notnan = ~isnan(meanprer_model(:,N));
        xnotnan = xarray(notnan);
        h = fill([xnotnan fliplr(xnotnan)],[meanprer_model(notnan,N)'+seprer_model(notnan,N)' fliplr(meanprer_model(notnan,N)'-seprer_model(notnan,N)')],C(N,:));
        set(h,'facealpha',0.7,'EdgeColor','none');
    end
end
xlim([1.8 5]); ylim([0 1.05]);
set(gca,'xtick',2:0.5:5);set(gca,'ytick',0:0.1:1);
set(gca,'xticklabel',{'2','','3','','4','','5'});set(gca,'yticklabel',{'0','','','','','0.5','','','','','1'});
xlabel('Highest reward so far'); ylabel('Proportion exploration');
set(gca,'fontsize',20);
set(gca,'TickDir','out');
set(gca,'LineWidth',1);
end

function psychometricsnl_N(type,exp,modelnum,weightedind,binform,tleft,Nrep,ifLoadSimu)
[subarray,obsnum] = fun_exp2subarray2obsnum(exp);
if tleft<=4
    switch binform
        case 1
            Narray = [5,7,10];
        case 2
            Narray = 5:10;
    end
else
    Narray = (tleft+1):10;
end
       
% calculate appropriate bins of r* for each subject
muvalues = linspace(1,5,41);
prer = nan(41,9,length(subarray)); num = nan(41,9,length(subarray));
for subnum = subarray
    script_loadsubdata;
    data = fun_generatemoreinfotask(data);
    data(:,7) = [nan;data(1:end-1,7)];
    data = data(data(:,3)>1,:);
    for muquantilenum = 1:41
        for N = Narray
            ind = (data(:,7)==muvalues(muquantilenum))&(data(:,2)-data(:,3)+1==tleft)&data(:,2)==N;
            if isempty(data(ind))
                num(muquantilenum,N,subnum) = 0;
                prer(muquantilenum,N,subnum) = nan;
            else
                num(muquantilenum,N,subnum) = size(data(ind),1);
                prer(muquantilenum,N,subnum) = mean(data(ind,5));
            end
        end
    end
    for N = Narray
        tmp = [];
        for muind = 1:41
            tmp = [tmp muvalues(muind)*ones(1,num(muind,N,subnum))];
        end
        muquantilevalue(:,N,subnum) = [1 quantile(tmp,9) 5];
        muquantilecenter(:,N,subnum) = quantile(tmp,0.05:0.1:0.95);
    end
    mubinnum = size(muquantilevalue,1)-1;
end

for subnum = subarray
    % data
    script_loadsubdata;
    data = fun_generatemoreinfotask(data);
    data(:,7) = [nan;data(1:end-1,7)];
    data = data(data(:,3)>1,:);
    for muquantilenum = 1:mubinnum
        for N = Narray
            ind=(data(:,7)<=muquantilevalue(muquantilenum+1,N,subnum))&(data(:,7)>muquantilevalue(muquantilenum,N,subnum))&(data(:,2)-data(:,3)+1==tleft)&data(:,2)==N;
            if isempty(data(ind))
                tempprer_data(muquantilenum,N,subnum) = nan;
                tempnum_data(muquantilenum,N,subnum) = 0;
            else
                tempprer_data(muquantilenum,N,subnum) = mean(data(ind,5));
                tempnum_data(muquantilenum,N,subnum) = size(data(ind,:),1);
            end
        end
    end
    
    if type == 2
        % model
        if ifLoadSimu
            load(['simulation_subj/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '_simusize' num2str(obsnum/39) '_Nrep' num2str(Nrep) '.mat']);
        end
        for irep = 1:Nrep
            if ifLoadSimu
                [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(simudata{irep});
            else
                load(['fittingresult/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '.mat']);
                [simudata,~] = simulate_data(modelnum,p_min,obsnum/39);
                [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(simudata);
            end
            for muquantilenum = 1:mubinnum
                for N = Narray
                    ind = (muvalue<=muquantilevalue(muquantilenum+1,N,subnum))&(muvalue>muquantilevalue(muquantilenum,N,subnum))&(daysleft==tleft)&totaldays==N;
                    if isempty(actions(ind))
                        tempprer_model(muquantilenum,N,subnum,irep) = nan;
                        tempnum_model(muquantilenum,N,subnum,irep) = 0;
                    else
                        tempprer_model(muquantilenum,N,subnum,irep) = mean(actions(ind));
                        tempnum_model(muquantilenum,N,subnum,irep) = length(actions(ind));
                    end
                end
            end
        end
    end
end

defcolor = get(0,'DefaultAxesColorOrder');
if type == 1
    [meanprer_data,~,seprer_data] = average(tempprer_data,tempnum_data,subarray,weightedind);
    meanprer_data(isnan(seprer_data)) = nan;
    hold on;
    for N = Narray
        xarray = mean(muquantilecenter(:,N,subarray),3);
        xarray = xarray(:)';
        errorbar(xarray(seprer_data(:,N)~=0),meanprer_data(seprer_data(:,N)~=0,N),seprer_data(seprer_data(:,N)~=0,N),...
            'color',defcolor(N-4,:),'LineStyle','none','LineWidth',2,'capsize',3);
        plot(xarray,meanprer_data(:,N),'color',defcolor(N-4,:),'LineWidth',2);
    end
else
    tempprer_model = nanmean(tempprer_model,4); tempnum_model = nanmean(tempnum_model,4);
    
    [meanprer_data,~,seprer_data] = average(tempprer_data,tempnum_data,subarray,weightedind);
    [meanprer_model,~,seprer_model] = average(tempprer_model,tempnum_model,subarray,weightedind);
    meanprer_data(isnan(seprer_data)) = nan; meanprer_model(isnan(seprer_model)) = nan;
    
    hold on;
    for N = Narray
        xarray = mean(muquantilecenter(:,N,subarray),3);
        xarray = xarray(:)';
        errorbar(xarray(seprer_data(:,N)~=0),meanprer_data(seprer_data(:,N)~=0,N),...
            seprer_data(seprer_data(:,N)~=0,N),'color',defcolor(N-4,:),'LineWidth',2,'LineStyle','none');
        notnan = ~isnan(meanprer_model(:,N));
        xnotnan = xarray(notnan);
        h = fill([xnotnan fliplr(xnotnan)],[meanprer_model(notnan,N)'+seprer_model(notnan,N)' fliplr(meanprer_model(notnan,N)'-seprer_model(notnan,N)')],defcolor(N-4,:));
        set(h,'facealpha',0.7,'EdgeColor','none');
    end
end
xlim([1.8 5]);ylim([0 1.05]);
set(gca,'xtick',2:0.5:5);set(gca,'ytick',0:0.1:1);
set(gca,'xticklabel',{'2','','3','','4','','5'});set(gca,'yticklabel',{'0','','','','','0.5','','','','','1'});
xlabel('Highest reward so far'); ylabel('Proportion exploration');
set(gca,'fontsize',20);
set(gca,'LineWidth',1);
set(gca,'TickDir','out');
end

function numswitch(type,exp,modelnum,Nrep,ifLoadSimu)
[subarray,obsnum] = fun_exp2subarray2obsnum(exp);
switchnum_model = zeros(10,max(subarray),Nrep);
switchnum_data = zeros(10,max(subarray));

if type == 1
    for subnum = subarray
        script_loadsubdata;
        for ind = 1:size(data,1)
            if data(ind,3)>1&&data(ind,5) ~= data(ind-1,5)
                switchnum_data(data(ind,2),subnum) = switchnum_data(data(ind,2),subnum)+1;
            end
        end
        switchnum_data(:,subnum) = switchnum_data(:,subnum)/size(data,1)*45;
    end
    
    % data
    plotx_data = 5:10;
    ploty_data = mean(switchnum_data(5:10,subarray),2);
    plotysem_data = std(switchnum_data(5:10,subarray),0,2)/sqrt(length(subarray));
    hold on;
    errorbar(plotx_data(plotysem_data~=0),ploty_data(plotysem_data~=0),plotysem_data(plotysem_data~=0),'color','k','Marker','none','LineWidth',2);
    plot(plotx_data,ploty_data,'color','k','LineWidth',2);
    axis([4.5 10.5 0 2.75]);
    
    % optimal policy
    N = 5:10; optnum = 1-0.5.^N;
    plot(N,optnum,'LineWidth',1,'color',[245,128,37]/255,'LineWidth',2);
    
else
    for subnum = subarray
        script_loadsubdata;
        for ind = 1:size(data,1)
            if data(ind,3)>1&&data(ind,5)~=data(ind-1,5)
                switchnum_data(data(ind,2),subnum) = switchnum_data(data(ind,2),subnum)+1;
            end
        end
        switchnum_data(:,subnum) = switchnum_data(:,subnum)/size(data,1)*45;
        
        if ifLoadSimu
            load(['simulation_subj/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '_simusize' num2str(obsnum/39) '_Nrep' num2str(Nrep) '.mat']);
        end
        for irep = 1:Nrep
            if ifLoadSimu
                task = simudata{irep};
            else
                load(['fittingresult/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '.mat']);
                [simudata,~] = simulate_data(modelnum,p_min,obsnum/39);
                task = simudata;
            end
            for ind = 1:size(task,1)
                if task(ind,3)>1&&task(ind,5) ~= task(ind-1,5)
                    switchnum_model(task(ind,2),subnum,irep) = switchnum_model(task(ind,2),subnum,irep)+1;
                end
            end
            switchnum_model(:,subnum,irep) = switchnum_model(:,subnum,irep)/size(task,1)*45;
        end
    end
    
    % models
    switchnum_model = nanmean(switchnum_model,3);
    plotx = 5:10;
    ploty = mean(switchnum_model(5:10,subarray),2)';
    plotysem = (std(switchnum_model(5:10,subarray),0,2)/sqrt(length(subarray)))';
    h = fill([plotx fliplr(plotx)],[ploty+plotysem fliplr(ploty-plotysem)],[0 0 0]);
    set(h,'facealpha',0.4,'EdgeColor','none');
    
    % data
    plotx_data = 5:10;
    ploty_data = mean(switchnum_data(5:10,subarray),2);
    plotysem_data = std(switchnum_data(5:10,subarray),0,2)/sqrt(length(subarray));
    errorbar(plotx_data,ploty_data,plotysem_data,'color',[0 0 0],'LineWidth',2,'LineStyle','none');    
    
end

axis([4.5 10.5 0 2.75]);
set(gca,'box','off');
set(gca,'TickDir','out');
set(gca,'ytick',0:0.5:2.5);set(gca,'yticklabel',[]);
set(gca,'xtick',5:10);set(gca,'xticklabel',[]);
set(gca,'LineWidth',1);
set(gca,'Xticklabel',{'5','6','7','8','9','10'});set(gca,'Yticklabel',{'0','','1','','2',''});
xlabel('Trial length'); ylabel('Number of switches');
set(gca,'fontsize',20);

end

function avereward_T(type,exp,modelnum,Nrep,ifLoadSimu)
[subarray,obsnum] = fun_exp2subarray2obsnum(exp);
if type==1
    % data
    avereward_data = nan(10,max(subarray));
    for subnum = subarray
        script_loadsubdata;
        data = fun_generatemoreinfotask(data);
        for totalday = 5:10
            ind = data(:,3)==data(:,2)&data(:,2)==totalday;
            avereward_data(totalday,subnum) = mean(data(ind,8));
        end
    end
    meanavereward_data = mean(avereward_data(5:10,subarray),2);
    setotalreward_data = std(avereward_data(5:10,subarray),0,2)/sqrt(length(subarray));
    errorbar(5:10,meanavereward_data,setotalreward_data,'k','LineWidth',2);
    
    % optimal policy
    load('optimal_policy_simu100000.mat');
    for totalday = 5:10
        ind = simudata(:,3)==simudata(:,2)&simudata(:,2)==totalday;
        avereward_opt(totalday) = mean(simudata(ind,8));
    end
    hold on;
    plot(5:10,avereward_opt(5:10),'color',[245,128,37]/255,'LineWidth',2);
    
    % random agent
    load('random_agent_simu100000.mat');
    for totalday = 5:10
        ind = simudata(:,3)==simudata(:,2)&simudata(:,2)==totalday;
        avereward_random(totalday) = mean(simudata(ind,8));
    end
    plot(5:10,avereward_random(5:10),'color',[87,6,140]/255,'LineWidth',2);
    
else
    % model
    avereward_data = nan(10,max(subarray));avereward_model = nan(10,max(subarray));
    for subnum = subarray
        % data
        script_loadsubdata;
        data = fun_generatemoreinfotask(data);
        for totalday = 5:10
            ind = data(:,3)==data(:,2)&data(:,2)==totalday;
            avereward_data(totalday,subnum) = mean(data(ind,8));
        end
        
        % model
        if ifLoadSimu
            load(['simulation_subj/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '_simusize' num2str(obsnum/39) '_Nrep' num2str(Nrep) '.mat']);
        end
        for irep = 1:Nrep
            if ifLoadSimu
                task = simudata{irep};
            else
                load(['fittingresult/' fun_modelnum2name(modelnum) '_sub' num2str(subnum) '.mat']);
                [simudata,~] = simulate_data(modelnum,p_min,obsnum/39);
                task = simudata;
            end
            for totalday = 5:10
                ind = task(:,3)==task(:,2)&task(:,2)==totalday;
                avereward_model(totalday,subnum,irep) = mean(task(ind,8));
            end
        end
    end
    
    hold on;
    % data
    meanavereward_data = mean(avereward_data(5:10,subarray),2);
    setotalreward_data = std(avereward_data(5:10,subarray),0,2)/sqrt(length(subarray));
    errorbar(5:10,meanavereward_data,setotalreward_data,'color',[0 0 0],'LineWidth',2,'LineStyle','none');
    
    % model
    avereward_model = nanmean(avereward_model,3);
    meantotalreward_model = (mean(avereward_model(5:10,subarray),2))';
    setotalreward_model = (std(avereward_model(5:10,subarray),0,2)/sqrt(length(subarray)))';
    h = fill([5:10 fliplr(5:10)],[meantotalreward_model+setotalreward_model fliplr(meantotalreward_model-setotalreward_model)],[0 0 0]);
    set(h,'facealpha',0.4,'EdgeColor','none');

end

box off;
axis([4.5 10.5 2.95 3.6]);
set(gca,'xtick',5:10);
set(gca,'ytick',3:0.1:3.5);
set(gca,'TickDir','out');
set(gca,'LineWidth',1);
set(gca,'xticklabel',{'5','6','7','8','9','10'});set(gca,'yticklabel',{'3','','','','','3.5'});
xlabel('Trial length'); ylabel('Average reward');
set(gca,'fontsize',20);
end


%% appendix

function [meanprer,howmany,sem] = average(prer,num,subarray,weightedaverage)
if weightedaverage == 1
    proportion = num(:,:,subarray)./repmat(sum(num(:,:,subarray),3),[1,1,length(subarray)]);
    meanprer = nansum(prer(:,:,subarray).*proportion,3);
    sem = sqrt(meanprer.*(1-meanprer)./sum(num(:,:,subarray),3));
else
    meanprer = nanmean(prer(:,:,subarray),3);
    sem = nanstd(prer(:,:,subarray),0,3)/sqrt(length(subarray));
end
howmany = mean(num(:,:,subarray),3);
end

function plot_colorplot(exp,prer,howmany)

howmany=howmanylog(exp,howmany);

hue=prer/3+2/3;
saturation=howmany;
value=1;

for ind1=1:size(prer,1)
    for ind2=1:size(prer,2)
        if isnan(prer(ind1,ind2))
            C(ind1,ind2,:)=[1,1,1];
        else
            C(ind1,ind2,:)=hsv2rgb([hue(ind1,ind2),saturation(ind1,ind2),value]);
        end
    end
end

image(C);
set(gca,'xtick',1:9); set(gca,'ytick',1:5:41);
set(gca,'LineWidth',1);
set(gca,'TickDir','out');
box off;
hold on;
xlim([0.5,9.5]); ylim([0.5,41.5]);
x=xlim;
y=ylim;
line([x(1) x(2)],[y(1) y(1)],'color',get(gca,'xcolor'),'LineWidth',1)
line([x(2) x(2)],[y(1) y(2)],'color',get(gca,'ycolor'),'LineWidth',1)
line([x(1) x(2)],[y(2) y(2)],'color',get(gca,'xcolor'),'LineWidth',1)
line([x(1) x(1)],[y(1) y(2)],'color',get(gca,'ycolor'),'LineWidth',1)
end

function colorplotlegend()
figure('position',[30 30 80 10]);

arrayx = 0:0.01:1;
Nx = numel(arrayx);
arrayy = 1;%log(1+(1:181)/181)/log(2);
Ny = numel(arrayy);
prer = repmat(arrayx,Ny,1);
howmany = repmat(arrayy',1,Nx);

% howmany=howmanylog(1,howmany);

hue=prer/3+2/3;
saturation=howmany;
value=1;

C = zeros(size(prer,1),size(prer,2),3);
for ind1=1:size(prer,1)
    for ind2=1:size(prer,2)
        if isnan(prer(ind1,ind2))
            C(ind1,ind2,:)=[1,1,1];
        else
            C(ind1,ind2,:)=hsv2rgb([hue(ind1,ind2),saturation(ind1,ind2),value]);
        end
    end
end

image(C);
set(gca,'yticklabel',[]); set(gca,'xticklabel',[]); set(gca,'xtick',1:(Nx-1)/2:Nx); set(gca,'ytick',1:(Ny-1)/2:Ny);
set(gca,'LineWidth',1);
set(gca, 'TickDir', 'out');
set(gca,'ticklength',[0 0]);
box off;
hold on;
x=xlim;
y=ylim;
line([x(1) x(2)],[y(1) y(1)],'color',get(gca,'xcolor'),'LineWidth',1)
line([x(2) x(2)],[y(1) y(2)],'color',get(gca,'ycolor'),'LineWidth',1)
line([x(1) x(2)],[y(2) y(2)],'color',get(gca,'xcolor'),'LineWidth',1)
line([x(1) x(1)],[y(1) y(2)],'color',get(gca,'ycolor'),'LineWidth',1)
end

function howmanynew = howmanylog(exp,howmany)
switch exp
    case {1,3}
        howmanynew=log(howmany+1)/log(181);
    case {2,4,5}
        howmanynew=log(howmany*3+1)/log(181);
end
end

function [actions,totaldays,daysleft,muvalue,RT] = fun_simudataextract(data)
i=1;
sizedata = size(data);
while i <= sizedata(1)
    if data(i,3) == 1
        data(i,7) = data(i,6);
        maxreward = data(i,6);
        for j = i:i+data(i,2)-1
            maxreward = max(maxreward,data(j,6));
            data(j,7) = maxreward;
        end
        i = j+1;
    end
end

mu_origin=[nan; data(1:end-1,7)];

ind = data(:,3)>1;
datause = data(ind,:);
actions = datause(:,5);
totaldays = datause(:,2);
daysleft = datause(:,2)-datause(:,3)+1;
muvalue = mu_origin(ind);
RT = datause(:,4);
end