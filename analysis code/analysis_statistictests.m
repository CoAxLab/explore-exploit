% Statistic tests

clear; close all; clc;
exp = 1;
subarray = fun_exp2subarray2obsnum(exp);

%% Proportion exploration ~ r*, t_left and T (logistic regressions)
% action ~ r* + t_left
varName = {'const','r*','t_left'};

for subnum = subarray
    load(['data_extracted/extracted_sub' num2str(subnum)]);
    coefficient1(subnum,:) = mnrfit([muvalue,daysleft],2-actions);
end

coeffmean1 = mean(coefficient1(subarray,:),1)
coeffse1 = std(coefficient1(subarray,:),0,1)/sqrt(length(subarray))

for ind = 2:3
    varName{ind}
    [H,pvalue,CI,STATS] = ttest(coefficient1(subarray,ind))
    mes_stats = mes(coefficient1(subarray,ind),0,'g1');
    g1 = mes_stats.g1
    g1ci = mes_stats.g1Ci
end

% action ~ r* + t_left + T
varName = {'const','r*','t_left','T'};
for subnum = subarray
    load(['data_extracted/extracted_sub' num2str(subnum)]);
    coefficient2(subnum,:) = mnrfit([muvalue,daysleft,totaldays],2-actions);
end

coeffmean2 = mean(coefficient2(subarray,:),1)
coeffse2 = std(coefficient2(subarray,:),0,1)/sqrt(length(subarray))

for ind = 2:4
    varName{ind}
    [H,pvalue,CI,STATS] = ttest(coefficient2(subarray,ind))
    mes_stats = mes(coefficient2(subarray,ind),0,'g1');
    g1 = mes_stats.g1
    g1ci = mes_stats.g1Ci
end

%% number of switches
numswitch = zeros(10,max(subarray));
for subnum = subarray
    script_loadsubdata;
    for ind = 1:size(data,1)
        if data(ind,3)>1&&data(ind,5)~=data(ind-1,5)
            numswitch(data(ind,2),subnum) = numswitch(data(ind,2),subnum)+1;
        end
    end
    numswitch(:,subnum) = numswitch(:,subnum)/size(data,1)*45;
end

% trend of T (linear regression)
for subnum=subarray
    T = [5,6,7,8,9,10]';
    mdl = LinearModel.fit(T,numswitch(5:10,subnum));
    slope(subnum) = mdl.Coefficients{2,1};
    intercept(subnum) = mdl.Coefficients{1,1};
end
meanslope = mean(slope(subarray))
seslope = std(slope(subarray))/sqrt(length(subarray))
[H,pslope,CI,STATS] = ttest(slope(subarray),0)
mes_stats = mes(slope(subarray),0,'g1');
g1 = mes_stats.g1
g1ci = mes_stats.g1Ci

% compare to optimal policy (t-test on every T)
for T = 5:10
    [H,pvalue(T),CI,STATS]=ttest(numswitch(T,subarray),1-0.5^(T-1));
    tvalue(T) = STATS.tstat;
    mes_stats = mes(numswitch(T,subarray),1-0.5^(T-1),'g1');
    g1(T) = mes_stats.g1;
    g1ci(T,1:2) = mes_stats.g1Ci;
end

pvalue(5:10)
tvalue(5:10)
g1(5:10)
g1ci(5:10,:)

[reject,p_adjust] = fun_Bonferroni_Holm(pvalue(5:10),0.05)


%% average reward
scoreperdaymat = zeros(max(subarray),10);
for subnum=subarray
    script_loadsubdata;
    for ind=1:size(data,1)
        if data(ind,3)==1
            tempscore=0;
        end
        tempscore=tempscore+data(ind,6);
        if data(ind,2)==data(ind,3)
            tempscore=tempscore/data(ind,2);
            scoreperdaymat(subnum,data(ind,2)) = scoreperdaymat(subnum,data(ind,2))+tempscore;
        end
    end
    avereward(subnum,:) = scoreperdaymat(subnum,:)/sum(data(:,3)==1)*6;
end

% trend of T (linear regression)
for subnum = subarray
    mdl = LinearModel.fit(5:10,avereward(subnum,5:10));
    slope(subnum) = mdl.Coefficients{2,1};
    intercept(subnum) = mdl.Coefficients{1,1};
end
meanslope = mean(slope(subarray))
seslope = std(slope(subarray))/sqrt(length(subarray))
[H,pslope,CI,STATS] = ttest(slope(subarray),0)
mes_stats = mes(slope(subarray),0,'g1');
g1 = mes_stats.g1
g1ci = mes_stats.g1Ci

% compare to optimal policy (t test on every T)
load('optimal_policy_simu100000.mat');
for T = 5:10
    ind = simudata(:,3)==simudata(:,2)&simudata(:,2)==T;
    avereward_opt(T) = mean(simudata(ind,8));
    [H,pvalue1(T),CI,STATS] = ttest(avereward(subarray,T),mean(avereward_opt(T)));
    tvalue1(T) = STATS.tstat;
    mes_stats = mes(avereward(subarray,T),mean(avereward_opt(T)),'g1');
    g11(T) = mes_stats.g1;
    g1ci1(T,:) = mes_stats.g1Ci;
end

pvalue1(5:10)
tvalue1(5:10)
g11(5:10)
g1ci1(5:10,:)

[reject,p_adjust1] = fun_Bonferroni_Holm(pvalue1(5:10),0.05)

% compare to random agent (t test on every T)
load('random_agent_simu100000.mat');
for T=5:10
    ind=simudata(:,3)==simudata(:,2)&simudata(:,2)==T;
    avereward_random(T)=mean(simudata(ind,8));
    [H,pvalue2(T),CI,STATS] = ttest(avereward(subarray,T),mean(avereward_random(T)));
    tvalue2(T) = STATS.tstat;
    mes_stats = mes(avereward(subarray,T),mean(avereward_random(T)),'g1');
    g12(T) = mes_stats.g1;
    g1ci2(T,:) = mes_stats.g1Ci;
end

pvalue2(5:10)
tvalue2(5:10)
g12(5:10)
g1ci2(5:10,:)

[reject,p_adjust2] = fun_Bonferroni_Holm(pvalue2(5:10),0.05)

%% learning effect (comparisons between first half and second half of the data)
% (1) Average reward: test if there is any difference in average reward
% between first half and second half
for subnum = subarray
    script_loadsubdata;
    N_trials = data(end,1);
    for i_trial = 1:N_trials
        avereward_pertrial(i_trial) = mean(data(data(:,1)==i_trial,6));
    end
    avereward(subnum,1) = mean(avereward_pertrial(1:N_trials/2));
    avereward(subnum,2) = mean(avereward_pertrial(N_trials/2+1:end));
end
[h,p,ci,stats] = ttest(avereward(subarray,1),avereward(subarray,2))
mes_stats = mes(avereward(subarray,1),avereward(subarray,2),'hedgesg','isDep',1);
mes_stats.hedgesg
mes_stats.hedgesgCi

% (2) Number of switches: test if there is any difference in number of
% switches between first half and second half
for subnum = subarray
    script_loadsubdata;
    N_trials = data(end,1);
    for i_trial = 1:N_trials
        data_trial = data(data(:,1)==i_trial,:);
        numswitches_pertrial(i_trial) = sum(abs(diff(data_trial(:,5)))==1);
    end
    numswitches(subnum,1) = mean(numswitches_pertrial(1:N_trials/2));
    numswitches(subnum,2) = mean(numswitches_pertrial(N_trials/2+1:end));
end
[h,p,ci,stats] = ttest(numswitches(subarray,1),numswitches(subarray,2))
mes_stats = mes(numswitches(subarray,1),numswitches(subarray,2),'hedgesg','isDep',1);
mes_stats.hedgesg
mes_stats.hedgesgCi

% (3) Fitted parameters: fit the first half and second half of the data to
% Prop-V model and test if there is any difference in fitted parameters
model = 5; % PropV
for subnum = subarray
    for ihalf = 1:2
        load(['fittingresult/halfdata/' fun_modelnum2name(model) '_sub' num2str(subnum) '_half' num2str(ihalf) '.mat']);
        k(subnum,ihalf) = p_min(1);
        b(subnum,ihalf) = p_min(2);
        sigma(subnum,ihalf) = p_min(3);
        beta(subnum,ihalf) = p_min(4);
    end
end
[h,p_pars(1),ci,stats] = ttest(k(subarray,1),k(subarray,2))
mes_stats = mes(k(subarray,1),k(subarray,2),'hedgesg','isDep',1);
mes_stats.hedgesg
mes_stats.hedgesgCi

[h,p_pars(2),ci,stats] = ttest(b(subarray,1),b(subarray,2))
mes_stats = mes(b(subarray,1),b(subarray,2),'hedgesg','isDep',1);
mes_stats.hedgesg
mes_stats.hedgesgCi

[h,p_pars(3),ci,stats] = ttest(sigma(subarray,1),sigma(subarray,2))
mes_stats = mes(sigma(subarray,1),sigma(subarray,2),'hedgesg','isDep',1);
mes_stats.hedgesg
mes_stats.hedgesgCi

[h,p_pars(4),ci,stats] = ttest(1./beta(subarray,1),1./beta(subarray,2))
mes_stats = mes(1./beta(subarray,1),1./beta(subarray,2),'hedgesg','isDep',1);
mes_stats.hedgesg
mes_stats.hedgesgCi

[reject,p_pars_adjust] = fun_Bonferroni_Holm(p_pars,0.05)